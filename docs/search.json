[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Colours of the Taylor Swift Universe",
    "section": "",
    "text": "Taylor Swift’s Eras Tour Color-Music Relationships\nThis is a short collection of visualization and Rstats exercises exploring Taylor Swift’s use of colour in her Eras tour outfits and her lyrics!"
  },
  {
    "objectID": "outfit_transitions.html#data-wrangling",
    "href": "outfit_transitions.html#data-wrangling",
    "title": "1  Surprise Song Outfits",
    "section": "1.1 Data wrangling",
    "text": "1.1 Data wrangling\n\n\n\n\n\n\nNote\n\n\n\nAll data paths are relative to the root of the GitHub repository\n\n\n\n## packages \nrequire(tidyverse)\nrequire(readxl)\nrequire(ggimage)\nrequire(extrafont)\n\n\n## reading in data\nsurpriseSongsDressColours <-  readxl::read_excel(\"raw_data/surprise_songs.xlsx\", sheet = \"List\")\nsurpriseSongsDressColours$Date <- as.Date(surpriseSongsDressColours$Date)\n## map hex colour to outfit\ndressColorMapping <- unique(surpriseSongsDressColours %>% select(DressName, ColourHex1))\ncolorPaletteDresses <- setNames(dressColorMapping$ColourHex1, dressColorMapping$DressName)\npathToDressColours <- \"dress_images/images_high_res/cropped/\"\n\n\n## Need only consider first element of each concerts as the\n## same outfit was worn for all surprise songs\n## for anyone concert\noneRowPerConcert <- surpriseSongsDressColours %>%\n    group_by(Date) %>%\n    arrange(Date, Order) %>% \n    slice(1) %>%\n    ungroup()\noneRowPerConcert\n\n# A tibble: 147 × 26\n   `Song title`         Mashups Mashup Mashup2 Guest City  State Country Stadium\n   <chr>                <chr>   <chr>  <chr>   <chr> <chr> <chr> <chr>   <chr>  \n 1 mirrorball           None    <NA>   <NA>    <NA>  Glen… Ariz… US      State …\n 2 this is me trying    None    <NA>   <NA>    <NA>  Glen… Ariz… US      State …\n 3 Our Song             None    <NA>   <NA>    <NA>  Las … Neva… US      Allegi…\n 4 cowboy like me       None    <NA>   <NA>    Marc… Las … Neva… US      Allegi…\n 5 Sad Beautiful Tragic None    <NA>   <NA>    <NA>  Arli… Texas US      AT&T   \n 6 Death By A Thousand… None    <NA>   <NA>    <NA>  Arli… Texas US      AT&T   \n 7 Speak Now            None    <NA>   <NA>    <NA>  Tampa Flor… US      Raymon…\n 8 The Great War        None    <NA>   <NA>    Aaro… Tampa Flor… US      Raymon…\n 9 mad woman            None    <NA>   <NA>    <NA>  Tampa Flor… US      Raymon…\n10 Wonderland           None    <NA>   <NA>    <NA>  Hous… Texas US      NRG    \n# ℹ 137 more rows\n# ℹ 17 more variables: Date <date>, DressName <chr>, Legs <chr>,\n#   Relationship <chr>, Start <dttm>, End <dttm>, Colour1 <chr>,\n#   ColourHex1 <chr>, ColourRGB1 <chr>, Colour2 <chr>, ColourHex2 <chr>,\n#   ColourRGB2 <chr>, `Night #` <dbl>, Order <dbl>, Instrument <chr>,\n#   `Special Annoucement` <chr>, Notes <chr>\n\n\n\n## map outfits to the corresponding images\noneRowPerConcert %>%\n    count(DressName) %>%\n    mutate(\n        percentage = n / sum(n) * 100,\n        imagePath = case_when(\n            DressName == \"Pink\" ~paste0(pathToDressColours, \"pink.jpg\"),\n            DressName == \"Green\" ~paste0(pathToDressColours, \"green.jpg\"),\n            DressName == \"Yellow\" ~paste0(pathToDressColours, \"yellow.jpg\"),\n            DressName == \"Blue\" ~paste0(pathToDressColours, \"blue.jpg\"),\n            DressName == \"Flamingo pink\" ~ paste0(pathToDressColours,\"flamingo_pink.jpg\"),\n            DressName == \"Ocean blue\" ~ paste0(pathToDressColours,\"ocean_blue.jpg\"),\n            DressName == \"Sunset orange\" ~ paste0(pathToDressColours,\"sunset_orange.jpg\"),\n            DressName == \"Cotton candy\" ~paste0(pathToDressColours, \"cotton_candy.jpg\"),\n            DressName == \"Blurple\" ~paste0(pathToDressColours, \"blurple.jpg\"),\n            DressName == \"Grapefruit\" ~ paste0(pathToDressColours,\"grapefruit.jpg\"),\n            DressName == \"Popsicle\" ~ paste0(pathToDressColours,\"popsicle.jpg\"),\n            TRUE ~ NA_character_\n        )) -> outfits\noutfits\n\n# A tibble: 11 × 4\n   DressName         n percentage imagePath                                     \n   <chr>         <int>      <dbl> <chr>                                         \n 1 Blue              9       6.12 dress_images/images_high_res/cropped/blue.jpg \n 2 Blurple           7       4.76 dress_images/images_high_res/cropped/blurple.…\n 3 Cotton candy      3       2.04 dress_images/images_high_res/cropped/cotton_c…\n 4 Flamingo pink    15      10.2  dress_images/images_high_res/cropped/flamingo…\n 5 Grapefruit        3       2.04 dress_images/images_high_res/cropped/grapefru…\n 6 Green            20      13.6  dress_images/images_high_res/cropped/green.jpg\n 7 Ocean blue       14       9.52 dress_images/images_high_res/cropped/ocean_bl…\n 8 Pink             29      19.7  dress_images/images_high_res/cropped/pink.jpg \n 9 Popsicle          4       2.72 dress_images/images_high_res/cropped/popsicle…\n10 Sunset orange    20      13.6  dress_images/images_high_res/cropped/sunset_o…\n11 Yellow           23      15.6  dress_images/images_high_res/cropped/yellow.j…"
  },
  {
    "objectID": "colour_sentiments.html",
    "href": "colour_sentiments.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "outfit_transitions.html#plotting",
    "href": "outfit_transitions.html#plotting",
    "title": "1  Surprise Song Outfits",
    "section": "1.2 Plotting",
    "text": "1.2 Plotting\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n## barchart\nggplot(outfits, aes(x = reorder(DressName, -n), y = n, fill = DressName)) +\n    geom_bar(stat = \"identity\", width = 0.8) +  \n    geom_image(\n        aes(image = imagePath, y = n),  \n        size = 0.15,                    \n        by = \"height\"                    \n    ) +\n    geom_text(\n        aes(y = n + 3.8, label = paste0(n, \"\\n(\", round(percentage, 1), \"%)\")),  \n        vjust = 0,  \n        color = \"black\",\n        size = 4\n    ) +\n    scale_fill_manual(values = colorPaletteDresses) +\n    theme_minimal() +\n    labs(title = \"\", x = \"\", y = \"\") +\n    theme(\n        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),\n        axis.text.y = element_text(size = 14),\n        plot.title = element_text(hjust = 0.5, size = 16),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position = \"none\"\n    ) + ylim(0, 35)\n\n\n\n\n\n\n\n\nmax_dress_level <- length(unique(surpriseSongsDressColours$DressName))\n ggplot(surpriseSongsDressColours, aes(x = as.Date(Date), y = DressName, color = ColourHex1)) +\n    geom_point(size = 4, alpha = 1) +\n    scale_color_identity() +\n    theme_minimal() +\n    labs(title = \"\", x = \"\", y = \"\" ) +\n    geom_rect(aes(xmin = as.Date(\"2023-08-28\"), xmax = as.Date(\"2023-11-08\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +\n    geom_rect(aes(xmin = as.Date(\"2023-11-27\"), xmax = as.Date(\"2024-02-06\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +  \n    geom_rect(aes(xmin = as.Date(\"2024-03-10\"), xmax = as.Date(\"2024-05-08\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +\n    geom_rect(aes(xmin = as.Date(\"2024-08-21\"), xmax = as.Date(\"2024-10-17\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +\n    ## Vertical lines for the key events\n    geom_vline(xintercept = as.Date(\"2024-05-09\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2023-03-17\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2024-10-18\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2023-08-24\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2024-02-07\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2024-04-16\"), linetype = \"solid\", color = \"darkgray\", linewidth = 2) +\n    ## Changed to 16 (the right day is 19th) for vis requirements\n    geom_vline(xintercept = as.Date(\"2023-07-07\"), linetype = \"solid\", color = \"purple\", linewidth = 2) +\n    geom_vline(xintercept = as.Date(\"2023-10-27\"), linetype = \"solid\", color = \"blue\", linewidth = 2) +\n    ## Text annotations for the events above\n    annotate(\"text\", x = as.Date(\"2024-05-09\"), y = max_dress_level, \n             label = \"Europe¹\", color = \"black\", angle = -90, vjust = -0.5,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2023-03-17\"), y = max_dress_level, \n             label = \"United\\nStates¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2024-10-18\"), y = max_dress_level, \n             label = \"North \\nAmerica¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2023-08-24\"), y = max_dress_level, \n             label = \"Latin \\nAmerica¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2024-02-07\"), y = max_dress_level, \n             label = \"Asia/\\nOceania¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2024-04-16\"), y = max_dress_level, \n             label = \"TTPD²\", color = \"darkgray\", angle = -90, vjust = -0.5,\n             family =\"Gill Sans MT\", size = 5, \n             fontface = \"bold\") +\n    annotate(\"text\", x = as.Date(\"2023-07-07\"), y = max_dress_level, \n             label = \"Speak\\nNow TV²\", color = \"purple\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2023-10-27\"), y = max_dress_level, \n             label = \"1989\\nTV²\", color = \"blue\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    scale_x_date(date_labels = \"%b %Y\", date_breaks = \"3 months\") +\n    theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 14),\n          axis.text.y = element_text(size = 14, hjust = 0), \n          plot.title = element_text(hjust=0.5, size = 14, margin = margin(b = 20), face = \"bold\"),\n          plot.margin = margin(t = -7, r = 0, b = 10, l = 0),\n          text = element_text(color = \"black\", family = \"Gill Sans MT\", size = 14))"
  },
  {
    "objectID": "outfit_transitions.html#visualizing-surprise-song-outfits",
    "href": "outfit_transitions.html#visualizing-surprise-song-outfits",
    "title": "1  Surprise Song Outfits",
    "section": "1.2 Visualizing surprise song outfits",
    "text": "1.2 Visualizing surprise song outfits\n\nThe most worn looks\n\n## barchart\nggplot(outfits, aes(x = reorder(DressName, -n), y = n, fill = DressName)) +\n    geom_bar(stat = \"identity\", width = 0.8) +  \n    geom_image(\n        aes(image = imagePath, y = n),  \n        size = 0.15,                    \n        by = \"height\"                    \n    ) +\n    geom_text(\n        aes(y = n + 3.8, label = paste0(n, \"\\n(\", round(percentage, 1), \"%)\")),  \n        vjust = 0,  \n        color = \"black\",\n        size = 4\n    ) +\n    scale_fill_manual(values = colorPaletteDresses) +\n    theme_minimal() +\n    labs(title = \"\", x = \"\", y = \"\") +\n    theme(\n        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),\n        axis.text.y = element_text(size = 14),\n        plot.title = element_text(hjust = 0.5, size = 16),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position = \"none\"\n    ) + ylim(0, 35)"
  },
  {
    "objectID": "outfit_transitions.html#are-the-outfits-random",
    "href": "outfit_transitions.html#are-the-outfits-random",
    "title": "1  Surprise Song Outfits",
    "section": "1.3 Are the outfits random?",
    "text": "1.3 Are the outfits random?\nIn this section we’re going to look at the order of surprise song outfits. First let’s just select the data we need.\n\ndata <- data.frame(Outfit = oneRowPerConcert$DressName,\n                   Leg = ifelse(oneRowPerConcert$Legs %in% c(\"First leg\", \"Latin America\", \"Asia-Oceania\"),\n                                \"First\",\n                         ifelse(oneRowPerConcert$Legs == \"European leg\", \"Europe\", \"Final\")))\n\ndata |> head()\n\n  Outfit   Leg\n1   Pink First\n2  Green First\n3   Pink First\n4  Green First\n5  Green First\n6   Pink First\n\n\nNow, let’s look at the outfit transitions by creating a transition matrix using a simple function transition_matrix, which takes a sequence of categorical events and returns a table of the number of observed transitions between each event (in our case named outfits).\n\ntransitions <- function(x) {\n  n <- length(x)\n  table(x[-n], x[-1])\n}\n\nLooking at the outfit transitions.\ndata$Outfit |> transitions() |> knitr::kable(caption = \"Outfit transitions of Swift's Eras tour\")\n\n\nOutfit transitions of Swift’s Eras tour\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlue\nBlurple\nCotton candy\nFlamingo pink\nGrapefruit\nGreen\nOcean blue\nPink\nPopsicle\nSunset orange\nYellow\n\n\n\n\nBlue\n1\n0\n0\n1\n0\n1\n0\n3\n0\n0\n3\n\n\nBlurple\n0\n3\n1\n0\n2\n0\n0\n0\n0\n0\n0\n\n\nCotton candy\n0\n1\n0\n0\n0\n0\n0\n0\n2\n0\n0\n\n\nFlamingo pink\n0\n0\n0\n1\n0\n0\n4\n0\n0\n10\n0\n\n\nGrapefruit\n0\n0\n1\n0\n0\n0\n0\n0\n2\n0\n0\n\n\nGreen\n3\n0\n0\n0\n0\n2\n0\n7\n0\n0\n8\n\n\nOcean blue\n0\n0\n0\n8\n0\n0\n0\n0\n0\n6\n0\n\n\nPink\n2\n0\n0\n0\n0\n11\n0\n7\n0\n0\n9\n\n\nPopsicle\n0\n2\n0\n0\n1\n0\n0\n0\n0\n1\n0\n\n\nSunset orange\n0\n1\n1\n5\n0\n0\n10\n0\n0\n3\n0\n\n\nYellow\n3\n0\n0\n0\n0\n6\n0\n11\n0\n0\n3\n\n\n\n\nThis is quite a sparse table (we know some outfits didn’t appear until later legs of the tour). So, let’s consider the transitions for each of the three main legs.\n## first leg\nfirst_leg <- data[data$Leg == \"First\", \"Outfit\"]\nfirst_leg |> transitions() |> knitr::kable(caption = \"Outfit transitions for the first leg of Swift's Eras tour\")\n\n\nOutfit transitions for the first leg of Swift’s Eras tour\n\n\n\nBlue\nGreen\nPink\nYellow\n\n\n\n\nBlue\n1\n1\n3\n3\n\n\nGreen\n3\n2\n7\n8\n\n\nPink\n2\n11\n7\n9\n\n\nYellow\n3\n6\n11\n3\n\n\n\n\n## europe leg\nmid_leg <- data[data$Leg == \"Europe\", \"Outfit\"]\nmid_leg |> transitions() |> knitr::kable(caption = \"Outfit transitions for the European leg of Swift's Eras tour\")\n\n\nOutfit transitions for the European leg of Swift’s Eras tour\n\n\n\nFlamingo pink\nOcean blue\nSunset orange\n\n\n\n\nFlamingo pink\n1\n4\n10\n\n\nOcean blue\n8\n0\n6\n\n\nSunset orange\n5\n10\n3\n\n\n\n\n## final leg\nfinal_leg <- data[data$Leg == \"Final\", \"Outfit\"]\nfinal_leg |> transitions() |> knitr::kable(caption = \"Outfit transitions for the final leg of Swift's Eras tour\")\n\n\nOutfit transitions for the final leg of Swift’s Eras tour\n\n\n\n\n\n\n\n\n\n\n\nBlurple\nCotton candy\nGrapefruit\nPopsicle\nSunset orange\n\n\n\n\nBlurple\n3\n1\n2\n0\n0\n\n\nCotton candy\n1\n0\n0\n2\n0\n\n\nGrapefruit\n0\n1\n0\n2\n0\n\n\nPopsicle\n2\n0\n1\n0\n1\n\n\nSunset orange\n1\n0\n0\n0\n0\n\n\n\n\n\n1.3.1 A \\(\\chi^2\\)-test for the transition counts\nLikely, the first standard hypothesis test you think of for count/contingency data is the \\(\\chi^2\\)-test (or the chi-squared test). Essentially, this works by testing for equal transition rates (if the outfit choices were completely random we’d expect equal numbers of transitions between the outfits); Slightly more formally,\n\\(H_0 = \\text{row outfits independent of column outfits}\\) vs. \\(H_1 = \\text{row outfits not independent of column outfits}\\).\n\n## first leg\nfirst_leg |> transitions() |> chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  transitions(first_leg)\nX-squared = 10.259, df = 9, p-value = 0.33\n\n## europe leg\nmid_leg |> transitions() |> chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  transitions(mid_leg)\nX-squared = 19.554, df = 4, p-value = 0.0006115\n\n## final leg\nfinal_leg |> transitions() |> chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  transitions(final_leg)\nX-squared = 17.337, df = 16, p-value = 0.3641\n\n\n\n\n\n\nTable 1.1: Summary of the chi-squared tests on the transition matricies for each leg of the Eras tour.\n\n\n\nChi-squared statistic\nDegrees of freedom\np-vlaue\n\n\n\n\nFirst Leg\n10.259\n9\n0.330\n\n\nEuropean Leg\n19.554\n4\n0.001\n\n\nFinal Leg\n17.337\n16\n0.364\n\n\n\n\n\n\nTherefore, if our \\(\\chi^2\\) assumptions were met we might infer that there’s some evidence against the outfits for the European leg being random.\n\n\n\n\n\nChi-squared distribution under the NULL hypothesis for each leg along with the observed chi-squared statistic in purple.\n\n\n\n\n\n\n1.3.2 A randomisation test\nIf we’re not happy that our parametric assumptions are met then we can (often) fall back on simple resampling methods; basically simulating what would happen under chance alone and then comparing how our observed situation stack up!\nTo begin with let’s use the \\(\\chi^2\\)-squared statistic to represent the transition matrix we observed for each leg (it is a valid metric comparing between what we expected under independence and what we observed). By using a randomisation test we can build up a sampling distribution of this chosen metric that represent what would happen under chance alone (i.e., without any assumptions about the shape of this distribution). Our observed statistics in this case are given in the first column of Table 1.1.\n\n## create a function for the randomisation test using chi-sq\n## on the transition matrix, using a for loop just bc\n\nrandomisation <- function(data, nreps = 1000, seed = 1984){\n  sampling_dist <- numeric(nreps)\n  set.seed(seed) \n  for (i in 1:nreps) {\n   sampling_dist[i] <- suppressWarnings(sample(data) |> \n                                          transitions() |> \n                                          chisq.test())$statistic\n  }\nreturn(sampling_dist)\n}\n\nCalculating a p-value (note they’re all pretty much the same as above!).\n\n## first leg\nnull_first <- randomisation(first_leg)\nmean(null_first >= (first_leg |> transitions() |> chisq.test())$statistic)\n\n[1] 0.336\n\n## European leg\nnull_mid <- randomisation(mid_leg)\nmean(null_mid >= (mid_leg |> transitions() |> chisq.test())$statistic)\n\n[1] 0.001\n\n## Final leg\nnull_final <- randomisation(final_leg)\nmean(null_final >= (final_leg |> transitions() |> chisq.test())$statistic)\n\n[1] 0.322\n\n\n\n\n\n\n\nSampling distribution of the test statistic (the chi-squared statistic) under the NULL hypothesis for each leg along with the observed test statistic in purple.\n\n\n\n\nBut, we can actually use any metric we like in a randomisation test! For our example, the \\(\\chi^2\\) is a nice (distance) statistic because it considers all the transitions, but if we were particularly interested in, say, a particular transition (e.g., Yellow \\(\\rightarrow\\) Pink for the first leg) we could look at those instead.\n\\(H_0 = \\text{A particular transition occured at random}\\)\nvs. \n\\(H_1 = \\text{A particular transition occured fewer or more times than expected}\\).\n[Note: than expected means than was expected under chance alone.]\n\n## create a new function for the randomisation test using the \n## numbers of a particular transition (from --> to)\n\nrandomisation <- function(data, from = \"Yellow\", to = \"Pink\", \n                          nreps = 1000, seed = 1984){\n  sampling_dist <- numeric(nreps)\n  set.seed(seed) \n  for (i in 1:nreps) {\n   sampling_dist[i] <- (sample(data) |> transitions())[from, to]\n  }\nreturn(sampling_dist)\n}\n\nCalculating a two-sided p-value.\n\n## first leg, Yellow --> Pink (default)\nnull_first <- randomisation(first_leg)\nobs_first <- (first_leg |> transitions())[\"Yellow\", \"Pink\"]\nmean(abs(null_first - mean(null_first)) >= abs(obs_first - mean(null_first)))\n\n[1] 0.199\n\n## European leg, Sunset orange --> Flamingo pink\nnull_mid <- randomisation(mid_leg, from = \"Sunset orange\", to = \"Flamingo pink\")\nobs_mid <- (mid_leg |> transitions())[\"Sunset orange\", \"Flamingo pink\"]\nmean(abs(null_mid - mean(null_mid)) >= abs(obs_mid - mean(null_mid)))\n\n[1] 0.766\n\n## Final leg, Blurple --> Blurple\nnull_final <- randomisation(final_leg, from = \"Blurple\", to = \"Blurple\")\nobs_final <- (final_leg |> transitions())[\"Blurple\", \"Blurple\"]\nmean(abs(null_final - mean(null_final)) >= abs(obs_final - mean(null_final)))\n\n[1] 0.644\n\n\n\n\n\n\n\nSampling distribution of the test statistic (the number of times a particular transition occured) under the NULL hypothesis for each leg along with the observed test statistic in purple.\n\n\n\n\nIn each case, no evidence to suggest we see the particular transitions more or less frequently than would be expected under the NULL hypothesis of chance alone. (Note the transitions were chosen arbitrarily)\n\n\n1.3.3 A likelihood ratio test\nWhat about using a model based approach? If the outfits were random (given the choices) then we’d expect each to occur independently of one another (i.e., the chance of one outfit is independent of any other).\nLet’s consider the first leg, defining the events mathematically we let \\(\\{X_1, X_2, \\ldots, X_n\\}\\) be the outfits taking values in \\(\\{\\text{Blue}, \\text{Green}, \\text{Pink}, \\text{Yellow}\\}\\) (i.e., four possible categories).\nIf the outfits were independent then we can write the likelihood as\n\\[L_0(p; x) = \\prod_{t=1}^{n} P(X_t = x_t) = \\prod_{j=1}^{4} p_j^{n_j}\\].\nHere \\(p_j\\) is the probability of observing category \\(j\\), \\(n_j\\) is the number of times category \\(j\\) appears from \\(t=2\\) to \\(n\\), and \\(\\sum_{j=1}^{k} p_j = 1\\). The log-likelihood is therefore \\[\\log L_0(p;x) = \\sum_{t=2}^{n} \\log p_{x_t} = \\sum_{j=1}^{4} n_j \\log p_j\\].\nCalculating this in R step-by-step\n\nn <- length(first_leg)\nn\n\n[1] 81\n\nk <- length(unique(first_leg))\nk\n\n[1] 4\n\nchain <- as.factor(first_leg)\nchain\n\n [1] Pink   Green  Pink   Green  Green  Pink   Yellow Pink   Green  Yellow\n[11] Pink   Green  Green  Pink   Yellow Pink   Green  Yellow Pink   Yellow\n[21] Green  Yellow Green  Pink   Pink   Green  Yellow Pink   Green  Yellow\n[31] Pink   Yellow Yellow Pink   Green  Pink   Pink   Yellow Yellow Pink  \n[41] Green  Pink   Pink   Yellow Pink   Pink   Pink   Pink   Yellow Green \n[51] Blue   Blue   Pink   Green  Yellow Blue   Pink   Yellow Yellow Blue  \n[61] Green  Blue   Yellow Green  Blue   Yellow Pink   Green  Yellow Pink  \n[71] Blue   Pink   Blue   Yellow Green  Yellow Green  Pink   Pink   Yellow\n[81] Blue  \nLevels: Blue Green Pink Yellow\n\np_indep <- table(chain) / n\np_indep ## independent probabilities\n\nchain\n     Blue     Green      Pink    Yellow \n0.1111111 0.2469136 0.3580247 0.2839506 \n\np_indep[as.integer(chain)] ## probabilities of each element as they occur\n\nchain\n     Pink     Green      Pink     Green     Green      Pink    Yellow      Pink \n0.3580247 0.2469136 0.3580247 0.2469136 0.2469136 0.3580247 0.2839506 0.3580247 \n    Green    Yellow      Pink     Green     Green      Pink    Yellow      Pink \n0.2469136 0.2839506 0.3580247 0.2469136 0.2469136 0.3580247 0.2839506 0.3580247 \n    Green    Yellow      Pink    Yellow     Green    Yellow     Green      Pink \n0.2469136 0.2839506 0.3580247 0.2839506 0.2469136 0.2839506 0.2469136 0.3580247 \n     Pink     Green    Yellow      Pink     Green    Yellow      Pink    Yellow \n0.3580247 0.2469136 0.2839506 0.3580247 0.2469136 0.2839506 0.3580247 0.2839506 \n   Yellow      Pink     Green      Pink      Pink    Yellow    Yellow      Pink \n0.2839506 0.3580247 0.2469136 0.3580247 0.3580247 0.2839506 0.2839506 0.3580247 \n    Green      Pink      Pink    Yellow      Pink      Pink      Pink      Pink \n0.2469136 0.3580247 0.3580247 0.2839506 0.3580247 0.3580247 0.3580247 0.3580247 \n   Yellow     Green      Blue      Blue      Pink     Green    Yellow      Blue \n0.2839506 0.2469136 0.1111111 0.1111111 0.3580247 0.2469136 0.2839506 0.1111111 \n     Pink    Yellow    Yellow      Blue     Green      Blue    Yellow     Green \n0.3580247 0.2839506 0.2839506 0.1111111 0.2469136 0.1111111 0.2839506 0.2469136 \n     Blue    Yellow      Pink     Green    Yellow      Pink      Blue      Pink \n0.1111111 0.2839506 0.3580247 0.2469136 0.2839506 0.3580247 0.1111111 0.3580247 \n     Blue    Yellow     Green    Yellow     Green      Pink      Pink    Yellow \n0.1111111 0.2839506 0.2469136 0.2839506 0.2469136 0.3580247 0.3580247 0.2839506 \n     Blue \n0.1111111 \n\np_indep[as.integer(chain)] |> log() ## log probabilities of each element as they occur\n\nchain\n     Pink     Green      Pink     Green     Green      Pink    Yellow      Pink \n-1.027153 -1.398717 -1.027153 -1.398717 -1.398717 -1.027153 -1.258955 -1.027153 \n    Green    Yellow      Pink     Green     Green      Pink    Yellow      Pink \n-1.398717 -1.258955 -1.027153 -1.398717 -1.398717 -1.027153 -1.258955 -1.027153 \n    Green    Yellow      Pink    Yellow     Green    Yellow     Green      Pink \n-1.398717 -1.258955 -1.027153 -1.258955 -1.398717 -1.258955 -1.398717 -1.027153 \n     Pink     Green    Yellow      Pink     Green    Yellow      Pink    Yellow \n-1.027153 -1.398717 -1.258955 -1.027153 -1.398717 -1.258955 -1.027153 -1.258955 \n   Yellow      Pink     Green      Pink      Pink    Yellow    Yellow      Pink \n-1.258955 -1.027153 -1.398717 -1.027153 -1.027153 -1.258955 -1.258955 -1.027153 \n    Green      Pink      Pink    Yellow      Pink      Pink      Pink      Pink \n-1.398717 -1.027153 -1.027153 -1.258955 -1.027153 -1.027153 -1.027153 -1.027153 \n   Yellow     Green      Blue      Blue      Pink     Green    Yellow      Blue \n-1.258955 -1.398717 -2.197225 -2.197225 -1.027153 -1.398717 -1.258955 -2.197225 \n     Pink    Yellow    Yellow      Blue     Green      Blue    Yellow     Green \n-1.027153 -1.258955 -1.258955 -2.197225 -1.398717 -2.197225 -1.258955 -1.398717 \n     Blue    Yellow      Pink     Green    Yellow      Pink      Blue      Pink \n-2.197225 -1.258955 -1.027153 -1.398717 -1.258955 -1.027153 -2.197225 -1.027153 \n     Blue    Yellow     Green    Yellow     Green      Pink      Pink    Yellow \n-2.197225 -1.258955 -1.398717 -1.258955 -1.398717 -1.027153 -1.027153 -1.258955 \n     Blue \n-2.197225 \n\nll0 <- p_indep[as.integer(chain)] |> log() |> sum() ## log likelihood\nll0\n\n[1] -106.4928\n\n\nNow, what about the likelihood if we assume the sequence of outfits is a first-order Markov chain (i.e., the current outfit \\(X_t\\) depends on the previous one \\(X_{t-1}\\)):\n\\[P(X_t = x_t \\mid X_{t-1} = x_{t-1}) = P_{x_{t-1}, x_t}.\\]\nHere \\(P_{i,j}\\) is the probability of transitioning from state \\(i\\) to state \\(j\\), again with \\(\\sum_{j=1}^{k} P_{i,j} = 1 \\quad \\text{for all } i\\). We can write the likelihood as\n\\[L_1(p;x_t|x_{t-1}) = \\prod_{t=2}^{n} P(X_t = x_t \\mid X_{t-1} = x_{t-1}) = \\prod_{i=1}^{k} \\prod_{j=1}^{k} P_{i,j}^{N_{i,j}}\\]\nWhere \\(N_{i,j}\\) is the number of transitions from state \\(i\\) to state \\(j\\). The log-likelihood is then\n\\[\\log(L_1(p;x_t|x_{t-1})) = \\sum_{t=2}^{n} \\log (P_{x_{t-1}, x_t}) = \\sum_{i=1}^{k} \\sum_{j=1}^{k} N_{i,j} \\log (P_{i,j})\\]\nCalculating this in R step-by-step\n\n## transition probability matrix\ntm <- prop.table(transitions(first_leg), 1) ## over rows\ntm\n\n        \n               Blue      Green       Pink     Yellow\n  Blue   0.12500000 0.12500000 0.37500000 0.37500000\n  Green  0.15000000 0.10000000 0.35000000 0.40000000\n  Pink   0.06896552 0.37931034 0.24137931 0.31034483\n  Yellow 0.13043478 0.26086957 0.47826087 0.13043478\n\n## using a for loop\nll1 <- 0 ## initialise\nfor(i in 2:n){\n  lli <- log(tm[chain[i-1], chain[i]]) ## element of tm\n  ll1 <- ll1 + lli\n}\nll1 ## log likelihood assuming a first-order Markov chain\n\n[1] -99.9088\n\n## we can benchmark using the markovchain package \nmarkovchain::markovchainFit(data = first_leg, method = \"mle\")$logLikelihood\n\n[1] -99.9088\n\n\nConstruction a likelihood ratio test statistic\n\\[\\Lambda = 2 \\left( \\log(L_1(p;x_t|x_{t-1}))  - \\log(L_0(p; x)) \\right)\\]\nUnder the NULL hypothesis \\(H_0\\), the test statistic \\(\\Lambda\\) asymptotically follows a \\(\\chi^2\\) distribution with degrees of freedom \\(\\text{df} = (k - 1)^2\\).\nIn R\n\ndelta <- 2 * (ll1 - ll0)\ndf <- (k - 1)^2\np_val <- pchisq(delta, df, lower.tail = FALSE)\n\nNo evidence against the outfits being independent.\n\n\n\n\n\nDistribution of the test statistic under the NULL hypothesis, the observed value shown in purple.\n\n\n\n\nSo, let’s make a function.\n\nlrt <- function(x, plot = FALSE){\n  ## under H0\n  n <- length(x)\n  k <- length(unique(x))\n  chain <- as.factor(x)\n  p_indep <- table(chain) / n\n  ll0 <- p_indep[as.integer(chain)] |> log() |> sum() \n  ## first-order Markov\n  tm <- prop.table(transitions(x), 1) \n  ll1 <- 0 \n  for(i in 2:n){\n    lli <- log(tm[chain[i-1], chain[i]]) \n    ll1 <- ll1 + lli\n  }\n  ## test statistic\n  delta <- 2 * (ll1 - ll0)\n  df <- (k - 1)^2\n  p_val <- pchisq(delta, df, lower.tail = FALSE)\n  if(plot){\n    chi <- data.frame(x = seq(0, 30, length.out = 100))\n    chi$density <- dchisq(chi$x, df = df)\n    chi %>%\n      ggplot(aes(x = x, y = density)) +\n      geom_line(linewidth = 2) +\n      geom_vline(aes(xintercept = delta), linetype = \"dashed\", color = \"purple\") +\n      labs(title = \"\",x = \"\", y = \"\") + theme_bw() -> p\n    print(p)\n  }\n  ## info to return\n  return(list(\"ll0\" = ll0,\n              \"ll1\" = ll1,\n              \"delta\" = delta,\n              \"df\" = df,\n              \"p.val\" = p_val))\n}\n\nlrt(first_leg)\n\n$ll0\n[1] -106.4928\n\n$ll1\n[1] -99.9088\n\n$delta\n[1] 13.16793\n\n$df\n[1] 9\n\n$p.val\n[1] 0.1551535\n\nlrt(mid_leg, plot = TRUE)\n\n\n\n\n$ll0\n[1] -52.30575\n\n$ll1\n[1] -39.26825\n\n$delta\n[1] 26.075\n\n$df\n[1] 4\n\n$p.val\n[1] 3.056156e-05\n\nlrt(final_leg, plot = TRUE)\n\n\n\n\n$ll0\n[1] -26.26847\n\n$ll1\n[1] -14.04639\n\n$delta\n[1] 24.44415\n\n$df\n[1] 16\n\n$p.val\n[1] 0.08024261\n\n\nFirst order Markov chain?\nSo, might we believe that for the European leg of her tour Swift’s outfits weren’t random and perhaps what she wore one night depended on her outfit the previous night (i.e., in stats speak followed a first-order Markov chain)?\n\n\n\n\n\n\nNote\n\n\n\nBasically, the first-order Markov property is that the future state of a system depends only on its current state and is independent of its past history.\n\n\n\nrequire(markovchain)\nverifyMarkovProperty(mid_leg) ## no evidence against the Markov property p-value 0.834 (~likely a Markov chain?)\n\nTesting markovianity property on given data sequence\nChi - square statistic is: 7.339583 \nDegrees of freedom are: 12 \nAnd corresponding p-value is: 0.8343811 \n\nmarkovchainFit(data = mid_leg, method = \"mle\") ## as above but with ses :)\n\n$estimate\nMLE Fit \n A  3 - dimensional discrete Markov Chain defined by the following states: \n Flamingo pink, Ocean blue, Sunset orange \n The transition matrix  (by rows)  is defined as follows: \n              Flamingo pink Ocean blue Sunset orange\nFlamingo pink    0.06666667  0.2666667     0.6666667\nOcean blue       0.57142857  0.0000000     0.4285714\nSunset orange    0.27777778  0.5555556     0.1666667\n\n\n$standardError\n              Flamingo pink Ocean blue Sunset orange\nFlamingo pink    0.06666667  0.1333333    0.21081851\nOcean blue       0.20203051  0.0000000    0.17496355\nSunset orange    0.12422600  0.1756821    0.09622504\n\n$confidenceLevel\n[1] 0.95\n\n$lowerEndpointMatrix\n              Flamingo pink  Ocean blue Sunset orange\nFlamingo pink    0.00000000 0.005338081    0.25346989\nOcean blue       0.17545597 0.000000000    0.08564909\nSunset orange    0.03429924 0.211224910    0.00000000\n\n$upperEndpointMatrix\n              Flamingo pink Ocean blue Sunset orange\nFlamingo pink     0.1973310  0.5279953     1.0000000\nOcean blue        0.9674012  0.0000000     0.7714938\nSunset orange     0.5212563  0.8998862     0.3552643\n\n$logLikelihood\n[1] -39.26825\n\n\nWhat about 1st vs 2nd Markov Chain\n\n## Let's trick markovchain into doing this for us\n## by creating a \"first order\" chain which is actually of order 2\n\nsnap <- data.frame(current = mid_leg)\nsnap$future <- lead(snap$current, 1)\nsnap$past <- lag(snap$current, 1)\n\nsec_order <- snap |>\n  filter(!is.na(future) & !is.na(past)) %>%\n  tidyr::unite(\"y_current\", c(\"past\", \"current\"), remove = FALSE) |>\n  mutate(y_next = lead(y_current, 1),\n         y_previous = lag(y_current, 1))\n\nll1 <- markovchainFit(data = mid_leg, method = \"mle\")$logLikelihood\nll1\n\n[1] -39.26825\n\nll2 <- markovchainFit(data = sec_order$y_current, method = \"mle\")$logLikelihood\nll2\n\n[1] -32.29189"
  }
]