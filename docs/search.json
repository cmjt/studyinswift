[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Colours of the Taylor Swift Universe",
    "section": "",
    "text": "Taylor Swift’s Eras Tour Color-Music Relationships\nThis is a short collection of visualization and Rstats exercises exploring Taylor Swift’s use of colour in her Eras tour outfits and her lyrics!"
  },
  {
    "objectID": "outfit_transitions.html#data-wrangling",
    "href": "outfit_transitions.html#data-wrangling",
    "title": "1  Surprise Song Outfits",
    "section": "1.1 Data wrangling",
    "text": "1.1 Data wrangling\n\n\n\n\n\n\nNote\n\n\n\nAll data paths are relative to the root of the GitHub repository\n\n\n\n## packages \nrequire(tidyverse)\nrequire(readxl)\nrequire(ggimage)\nrequire(extrafont)\n\n\n## reading in data\nsurpriseSongsDressColours <-  readxl::read_excel(\"raw_data/surprise_songs.xlsx\", sheet = \"List\")\nsurpriseSongsDressColours$Date <- as.Date(surpriseSongsDressColours$Date)\n## map hex colour to outfit\ndressColorMapping <- unique(surpriseSongsDressColours %>% select(DressName, ColourHex1))\ncolorPaletteDresses <- setNames(dressColorMapping$ColourHex1, dressColorMapping$DressName)\npathToDressColours <- \"dress_images/images_high_res/cropped/\"\n\n\n## Need only consider first element of each concerts as the\n## same outfit was worn for all surprise songs\n## for anyone concert\noneRowPerConcert <- surpriseSongsDressColours %>%\n    group_by(Date) %>%\n    arrange(Date, Order) %>% \n    slice(1) %>%\n    ungroup()\noneRowPerConcert\n\n# A tibble: 147 × 26\n   `Song title`         Mashups Mashup Mashup2 Guest City  State Country Stadium\n   <chr>                <chr>   <chr>  <chr>   <chr> <chr> <chr> <chr>   <chr>  \n 1 mirrorball           None    <NA>   <NA>    <NA>  Glen… Ariz… US      State …\n 2 this is me trying    None    <NA>   <NA>    <NA>  Glen… Ariz… US      State …\n 3 Our Song             None    <NA>   <NA>    <NA>  Las … Neva… US      Allegi…\n 4 cowboy like me       None    <NA>   <NA>    Marc… Las … Neva… US      Allegi…\n 5 Sad Beautiful Tragic None    <NA>   <NA>    <NA>  Arli… Texas US      AT&T   \n 6 Death By A Thousand… None    <NA>   <NA>    <NA>  Arli… Texas US      AT&T   \n 7 Speak Now            None    <NA>   <NA>    <NA>  Tampa Flor… US      Raymon…\n 8 The Great War        None    <NA>   <NA>    Aaro… Tampa Flor… US      Raymon…\n 9 mad woman            None    <NA>   <NA>    <NA>  Tampa Flor… US      Raymon…\n10 Wonderland           None    <NA>   <NA>    <NA>  Hous… Texas US      NRG    \n# ℹ 137 more rows\n# ℹ 17 more variables: Date <date>, DressName <chr>, Legs <chr>,\n#   Relationship <chr>, Start <dttm>, End <dttm>, Colour1 <chr>,\n#   ColourHex1 <chr>, ColourRGB1 <chr>, Colour2 <chr>, ColourHex2 <chr>,\n#   ColourRGB2 <chr>, `Night #` <dbl>, Order <dbl>, Instrument <chr>,\n#   `Special Annoucement` <chr>, Notes <chr>\n\n\n\n## map outfits to the corresponding images\noneRowPerConcert %>%\n    count(DressName) %>%\n    mutate(\n        percentage = n / sum(n) * 100,\n        imagePath = case_when(\n            DressName == \"Pink\" ~paste0(pathToDressColours, \"pink.jpg\"),\n            DressName == \"Green\" ~paste0(pathToDressColours, \"green.jpg\"),\n            DressName == \"Yellow\" ~paste0(pathToDressColours, \"yellow.jpg\"),\n            DressName == \"Blue\" ~paste0(pathToDressColours, \"blue.jpg\"),\n            DressName == \"Flamingo pink\" ~ paste0(pathToDressColours,\"flamingo_pink.jpg\"),\n            DressName == \"Ocean blue\" ~ paste0(pathToDressColours,\"ocean_blue.jpg\"),\n            DressName == \"Sunset orange\" ~ paste0(pathToDressColours,\"sunset_orange.jpg\"),\n            DressName == \"Cotton candy\" ~paste0(pathToDressColours, \"cotton_candy.jpg\"),\n            DressName == \"Blurple\" ~paste0(pathToDressColours, \"blurple.jpg\"),\n            DressName == \"Grapefruit\" ~ paste0(pathToDressColours,\"grapefruit.jpg\"),\n            DressName == \"Popsicle\" ~ paste0(pathToDressColours,\"popsicle.jpg\"),\n            TRUE ~ NA_character_\n        )) -> outfits\noutfits\n\n# A tibble: 11 × 4\n   DressName         n percentage imagePath                                     \n   <chr>         <int>      <dbl> <chr>                                         \n 1 Blue              9       6.12 dress_images/images_high_res/cropped/blue.jpg \n 2 Blurple           7       4.76 dress_images/images_high_res/cropped/blurple.…\n 3 Cotton candy      3       2.04 dress_images/images_high_res/cropped/cotton_c…\n 4 Flamingo pink    15      10.2  dress_images/images_high_res/cropped/flamingo…\n 5 Grapefruit        3       2.04 dress_images/images_high_res/cropped/grapefru…\n 6 Green            20      13.6  dress_images/images_high_res/cropped/green.jpg\n 7 Ocean blue       14       9.52 dress_images/images_high_res/cropped/ocean_bl…\n 8 Pink             29      19.7  dress_images/images_high_res/cropped/pink.jpg \n 9 Popsicle          4       2.72 dress_images/images_high_res/cropped/popsicle…\n10 Sunset orange    20      13.6  dress_images/images_high_res/cropped/sunset_o…\n11 Yellow           23      15.6  dress_images/images_high_res/cropped/yellow.j…"
  },
  {
    "objectID": "colour_sentiments.html",
    "href": "colour_sentiments.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "outfit_transitions.html#plotting",
    "href": "outfit_transitions.html#plotting",
    "title": "1  Surprise Song Outfits",
    "section": "1.2 Plotting",
    "text": "1.2 Plotting\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n## barchart\nggplot(outfits, aes(x = reorder(DressName, -n), y = n, fill = DressName)) +\n    geom_bar(stat = \"identity\", width = 0.8) +  \n    geom_image(\n        aes(image = imagePath, y = n),  \n        size = 0.15,                    \n        by = \"height\"                    \n    ) +\n    geom_text(\n        aes(y = n + 3.8, label = paste0(n, \"\\n(\", round(percentage, 1), \"%)\")),  \n        vjust = 0,  \n        color = \"black\",\n        size = 4\n    ) +\n    scale_fill_manual(values = colorPaletteDresses) +\n    theme_minimal() +\n    labs(title = \"\", x = \"\", y = \"\") +\n    theme(\n        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),\n        axis.text.y = element_text(size = 14),\n        plot.title = element_text(hjust = 0.5, size = 16),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position = \"none\"\n    ) + ylim(0, 35)\n\n\n\n\n\n\n\n\nmax_dress_level <- length(unique(surpriseSongsDressColours$DressName))\n ggplot(surpriseSongsDressColours, aes(x = as.Date(Date), y = DressName, color = ColourHex1)) +\n    geom_point(size = 4, alpha = 1) +\n    scale_color_identity() +\n    theme_minimal() +\n    labs(title = \"\", x = \"\", y = \"\" ) +\n    geom_rect(aes(xmin = as.Date(\"2023-08-28\"), xmax = as.Date(\"2023-11-08\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +\n    geom_rect(aes(xmin = as.Date(\"2023-11-27\"), xmax = as.Date(\"2024-02-06\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +  \n    geom_rect(aes(xmin = as.Date(\"2024-03-10\"), xmax = as.Date(\"2024-05-08\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +\n    geom_rect(aes(xmin = as.Date(\"2024-08-21\"), xmax = as.Date(\"2024-10-17\"),\n                  ymin = -Inf, ymax = Inf), fill = \"gray\", alpha = 0.01, color = NA) +\n    ## Vertical lines for the key events\n    geom_vline(xintercept = as.Date(\"2024-05-09\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2023-03-17\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2024-10-18\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2023-08-24\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2024-02-07\"), linetype = \"dashed\", color = \"black\") +\n    geom_vline(xintercept = as.Date(\"2024-04-16\"), linetype = \"solid\", color = \"darkgray\", linewidth = 2) +\n    ## Changed to 16 (the right day is 19th) for vis requirements\n    geom_vline(xintercept = as.Date(\"2023-07-07\"), linetype = \"solid\", color = \"purple\", linewidth = 2) +\n    geom_vline(xintercept = as.Date(\"2023-10-27\"), linetype = \"solid\", color = \"blue\", linewidth = 2) +\n    ## Text annotations for the events above\n    annotate(\"text\", x = as.Date(\"2024-05-09\"), y = max_dress_level, \n             label = \"Europe¹\", color = \"black\", angle = -90, vjust = -0.5,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2023-03-17\"), y = max_dress_level, \n             label = \"United\\nStates¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2024-10-18\"), y = max_dress_level, \n             label = \"North \\nAmerica¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2023-08-24\"), y = max_dress_level, \n             label = \"Latin \\nAmerica¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2024-02-07\"), y = max_dress_level, \n             label = \"Asia/\\nOceania¹\", color = \"black\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2024-04-16\"), y = max_dress_level, \n             label = \"TTPD²\", color = \"darkgray\", angle = -90, vjust = -0.5,\n             family =\"Gill Sans MT\", size = 5, \n             fontface = \"bold\") +\n    annotate(\"text\", x = as.Date(\"2023-07-07\"), y = max_dress_level, \n             label = \"Speak\\nNow TV²\", color = \"purple\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    annotate(\"text\", x = as.Date(\"2023-10-27\"), y = max_dress_level, \n             label = \"1989\\nTV²\", color = \"blue\", angle = -90, vjust = -0.2,\n             family =\"Gill Sans MT\", size = 5) +\n    scale_x_date(date_labels = \"%b %Y\", date_breaks = \"3 months\") +\n    theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 14),\n          axis.text.y = element_text(size = 14, hjust = 0), \n          plot.title = element_text(hjust=0.5, size = 14, margin = margin(b = 20), face = \"bold\"),\n          plot.margin = margin(t = -7, r = 0, b = 10, l = 0),\n          text = element_text(color = \"black\", family = \"Gill Sans MT\", size = 14))"
  },
  {
    "objectID": "outfit_transitions.html#visualizing-surprise-song-outfits",
    "href": "outfit_transitions.html#visualizing-surprise-song-outfits",
    "title": "1  Surprise Song Outfits",
    "section": "1.2 Visualizing surprise song outfits",
    "text": "1.2 Visualizing surprise song outfits\n\nThe most worn looks\n\n## barchart\nggplot(outfits, aes(x = reorder(DressName, -n), y = n, fill = DressName)) +\n    geom_bar(stat = \"identity\", width = 0.8) +  \n    geom_image(\n        aes(image = imagePath, y = n),  \n        size = 0.15,                    \n        by = \"height\"                    \n    ) +\n    geom_text(\n        aes(y = n + 3.8, label = paste0(n, \"\\n(\", round(percentage, 1), \"%)\")),  \n        vjust = 0,  \n        color = \"black\",\n        size = 4\n    ) +\n    scale_fill_manual(values = colorPaletteDresses) +\n    theme_minimal() +\n    labs(title = \"\", x = \"\", y = \"\") +\n    theme(\n        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),\n        axis.text.y = element_text(size = 14),\n        plot.title = element_text(hjust = 0.5, size = 16),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        legend.position = \"none\"\n    ) + ylim(0, 35)"
  },
  {
    "objectID": "outfit_transitions.html#are-the-outfits-random",
    "href": "outfit_transitions.html#are-the-outfits-random",
    "title": "1  Surprise Song Outfits",
    "section": "1.3 Are the outfits random?",
    "text": "1.3 Are the outfits random?\nIn this section we’re going to look at the order of surprise song outfits. First let’s just select the data we need.\n\ndata <- data.frame(Outfit = oneRowPerConcert$DressName,\n                   Leg = ifelse(oneRowPerConcert$Legs %in% c(\"First leg\", \"Latin America\", \"Asia-Oceania\"),\n                                \"First\",\n                         ifelse(oneRowPerConcert$Legs == \"European leg\", \"Europe\", \"Final\")))\n\ndata |> head()\n\n  Outfit   Leg\n1   Pink First\n2  Green First\n3   Pink First\n4  Green First\n5  Green First\n6   Pink First\n\n\nNow, let’s look at the outfit transitions by creating a transition matrix using a simple function transition_matrix, which takes a sequence of categorical events and returns a table of the number of observed transitions between each event (in our case named outfits).\n\ntransitions <- function(x) {\n  n <- length(x)\n  table(x[-n], x[-1])\n}\n\nLooking at the outfit transitions.\ndata$Outfit |> transitions() |> knitr::kable(caption = \"Outfit transitions of Swift's Eras tour\")\n\n\nOutfit transitions of Swift’s Eras tour\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlue\nBlurple\nCotton candy\nFlamingo pink\nGrapefruit\nGreen\nOcean blue\nPink\nPopsicle\nSunset orange\nYellow\n\n\n\n\nBlue\n1\n0\n0\n1\n0\n1\n0\n3\n0\n0\n3\n\n\nBlurple\n0\n3\n1\n0\n2\n0\n0\n0\n0\n0\n0\n\n\nCotton candy\n0\n1\n0\n0\n0\n0\n0\n0\n2\n0\n0\n\n\nFlamingo pink\n0\n0\n0\n1\n0\n0\n4\n0\n0\n10\n0\n\n\nGrapefruit\n0\n0\n1\n0\n0\n0\n0\n0\n2\n0\n0\n\n\nGreen\n3\n0\n0\n0\n0\n2\n0\n7\n0\n0\n8\n\n\nOcean blue\n0\n0\n0\n8\n0\n0\n0\n0\n0\n6\n0\n\n\nPink\n2\n0\n0\n0\n0\n11\n0\n7\n0\n0\n9\n\n\nPopsicle\n0\n2\n0\n0\n1\n0\n0\n0\n0\n1\n0\n\n\nSunset orange\n0\n1\n1\n5\n0\n0\n10\n0\n0\n3\n0\n\n\nYellow\n3\n0\n0\n0\n0\n6\n0\n11\n0\n0\n3\n\n\n\n\nThis is quite a sparse table (we know some outfits didn’t appear until later legs of the tour). So, let’s consider the transitions for each of the three main legs.\n## first leg\nfirst_leg <- data[data$Leg == \"First\", \"Outfit\"]\nfirst_leg |> transitions() |> knitr::kable(caption = \"Outfit transitions for the first leg of Swift's Eras tour\")\n\n\nOutfit transitions for the first leg of Swift’s Eras tour\n\n\n\nBlue\nGreen\nPink\nYellow\n\n\n\n\nBlue\n1\n1\n3\n3\n\n\nGreen\n3\n2\n7\n8\n\n\nPink\n2\n11\n7\n9\n\n\nYellow\n3\n6\n11\n3\n\n\n\n\n## europe leg\nmid_leg <- data[data$Leg == \"Europe\", \"Outfit\"]\nmid_leg |> transitions() |> knitr::kable(caption = \"Outfit transitions for the European leg of Swift's Eras tour\")\n\n\nOutfit transitions for the European leg of Swift’s Eras tour\n\n\n\nFlamingo pink\nOcean blue\nSunset orange\n\n\n\n\nFlamingo pink\n1\n4\n10\n\n\nOcean blue\n8\n0\n6\n\n\nSunset orange\n5\n10\n3\n\n\n\n\n## final leg\nfinal_leg <- data[data$Leg == \"Final\", \"Outfit\"]\nfinal_leg |> transitions() |> knitr::kable(caption = \"Outfit transitions for the final leg of Swift's Eras tour\")\n\n\nOutfit transitions for the final leg of Swift’s Eras tour\n\n\n\n\n\n\n\n\n\n\n\nBlurple\nCotton candy\nGrapefruit\nPopsicle\nSunset orange\n\n\n\n\nBlurple\n3\n1\n2\n0\n0\n\n\nCotton candy\n1\n0\n0\n2\n0\n\n\nGrapefruit\n0\n1\n0\n2\n0\n\n\nPopsicle\n2\n0\n1\n0\n1\n\n\nSunset orange\n1\n0\n0\n0\n0\n\n\n\n\n\n1.3.1 A \\(\\chi^2\\)-test for the transition counts\nLikely, the first standard hypothesis test you think of for count/contingency data is the \\(\\chi^2\\)-test (or the chi-squared test). Essentially, this works by testing for equal transition rates (if the outfit choices were completely random we’d expect equal numbers of transitions between the outfits); Slightly more formally,\n\\(H_0 = \\text{row outfits independent of column outfits}\\) vs. \\(H_1 = \\text{row outfits not independent of column outfits}\\).\n\n## first leg\nfirst_leg |> transitions() |> chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  transitions(first_leg)\nX-squared = 10.259, df = 9, p-value = 0.33\n\n## europe leg\nmid_leg |> transitions() |> chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  transitions(mid_leg)\nX-squared = 19.554, df = 4, p-value = 0.0006115\n\n## final leg\nfinal_leg |> transitions() |> chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  transitions(final_leg)\nX-squared = 17.337, df = 16, p-value = 0.3641\n\n\n\n\nSummary of the chi-squated tests on the transition matricies for each leg of the Eras tour.\n\n\n\nChi-squared statistic\nDegrees of freedom\np-vlaue\n\n\n\n\nFirst Leg\n10.259\n9\n0.330\n\n\nEuropean Leg\n19.554\n4\n0.001\n\n\nFinal Leg\n17.337\n16\n0.364\n\n\n\n\nTherefore, if our \\(\\chi^2\\) assumptions were met we might infer that there’s some evidence against the outfits for the European leg being random.\n\n\n\n\n\nChi-squared distribution under the NULL hypothesis for each leg along with the observed chi-squared statistic in purple.\n\n\n\n\n\n\n1.3.2 A randomisation test\nIf we’re not happy that our parametric assumptions are met then we can (often) fall back on simple resampling methods; basically simulating what would happen under chance alone and then comparing how our observed situation stack up!\nTo begin with let’s use the \\(\\chi^2\\)-squared statistic to represent the transition matrix we observed for each leg (it is a valid metric comparing between what we expected under independence and what we observed). By using a randomisation test we can build up a sampling distribution of this chosen metric that represent what would happen under chance alone (i.e., without any assumptions about the shape of this distribution). Our observed statistics in this case are given in the first column of (tab-chisq?).\n\n## create a function for the randomisation test using chi-sq\n## on the transition matrix, using a for loop just bc\n\nrandomisation <- function(data, nreps = 1000, seed = 1984){\n  sampling_dist <- numeric(nreps)\n  set.seed(seed) \n  for (i in 1:nreps) {\n   sampling_dist[i] <- suppressWarnings(sample(data) |> \n                                          transitions() |> \n                                          chisq.test())$statistic\n  }\nreturn(sampling_dist)\n}\n\nCalculating a p-value (note they’re all pretty much the same as above!).\n\n## first leg\nnull_first <- randomisation(first_leg)\nmean(null_first >= (first_leg |> transitions() |> chisq.test())$statistic)\n\n[1] 0.336\n\n## European leg\nnull_mid <- randomisation(mid_leg)\nmean(null_mid >= (mid_leg |> transitions() |> chisq.test())$statistic)\n\n[1] 0.001\n\n## Final leg\nnull_final <- randomisation(final_leg)\nmean(null_final >= (final_leg |> transitions() |> chisq.test())$statistic)\n\n[1] 0.322\n\n\n\n\n\n\n\nSampling distribution of the test statistic (the chi-squared statistic) under the NULL hypothesis for each leg along with the observed test statistic in purple.\n\n\n\n\nBut, we can actually use any metric we like in a randomisation test! For our example, the \\(\\chi^2\\) is a nice (distance) statistic because it considers all the transitions, but if we were particularly interested in consecutive repeated outfits (i.e., the diagonals of the transition matrix) we could look at those instead.\n\\(H_0 = \\text{outfit sequence is random}\\) vs. \\(H_1 = \\text{number of consecutive repeated outfits (i.e., of the same type) is higher or lower than would likely occur by chance}\\).\n\n## create a new function for the randomisation test using the \n## diagonals of the transition matrix (i.e., consecutively repeated outfits)\n\nrandomisation <- function(data, nreps = 1000, seed = 1984){\n  sampling_dist <- numeric(nreps)\n  set.seed(seed) \n  for (i in 1:nreps) {\n   sampling_dist[i] <- sample(data) |> transitions() |> diag() |> sum()\n  }\nreturn(sampling_dist)\n}\n\nCalculating a two-sided p-value.\n\n## first leg\nnull_first <- randomisation(first_leg)\nobs_first <- first_leg |> transitions() |> diag() |> sum()\nmean(abs(null_first - mean(null_first)) >= abs(obs_first - mean(null_first)))\n\n[1] 0.022\n\n## European leg\nnull_mid <- randomisation(mid_leg)\nobs_mid <- mean(null_mid >= mid_leg |> transitions() |> diag() |> sum())\nmean(abs(null_mid - mean(null_mid)) >= abs(obs_mid - mean(null_mid)))\n\n[1] 0\n\n## Final leg\nnull_final <- randomisation(final_leg)\nobs_final <- mean(null_final >= final_leg |> transitions() |> diag() |> sum())\nmean(abs(null_final - mean(null_final)) >= abs(obs_final - mean(null_final)))\n\n[1] 0.035\n\n\n\n\n\n\n\nSampling distribution of the test statistic (the number of consecutive outfits repeated) under the NULL hypothesis for each leg along with the observed test statistic in purple.\n\n\n\n\n\n\n1.3.3 A likelihood ratio test!"
  }
]