# Colour Sentiments

```{r}
#| echo: FALSE
load("onload.RData")
require(tidyverse)
```

```{r}
#| warning: FALSE
allSongsMetadata <- "raw_data/album_info_metadata_neutral.xlsx"
allSongsMetadata <- readxl::read_excel(allSongsMetadata, sheet = "metadata")
source("code/colour_palletts.r")
rawColorData <- data.frame(
    colour = trimws(unlist(strsplit(allSongsMetadata$colour_MK, ";"))),
    meaning = trimws(unlist(strsplit(allSongsMetadata$colour_meaningMK, ";")))
) %>% filter(!is.na(colour) & !is.na(meaning))

colorSentimentScores <- rawColorData %>%
    mutate(
        meaning = trimws(meaning),  
        score = case_when(
            tolower(meaning) == "positive" ~ 1,
            tolower(meaning) == "neutral" ~ 0.5,
            tolower(meaning) == "negative" ~ 0,
            TRUE ~ NA_real_
        )
    )

## Calculate average sentiment for each individual color
individualColorSentiments <- colorSentimentScores %>%
    group_by(colour) %>%
    summarise(
        avgSentiment = mean(score, na.rm = TRUE),
        mentionCount = n()
    ) %>%
    ungroup()

individualColorSentiments$colourGroup <- colorGroups[individualColorSentiments$colour]
## Beta regression basic
mod <- betareg::betareg(avgSentiment ~ colourGroup, data = individualColorSentiments)
mod |> summary()
require(mgcv)
gam <- gam(avgSentiment ~ colourGroup, family = betar(link="logit"), data = individualColorSentiments)
summary(gam)
new.y <- predict(gam, se.fit = TRUE, type="response")

## correspondance analysis

table(colorSentimentScores$colour, colorSentimentScores$meaning)
colorSentimentScores$colourGroup <- colorGroups[colorSentimentScores$colour]
cols.df <- as.data.frame.matrix(table(colorSentimentScores$colourGroup, colorSentimentScores$meaning))
cols.df
chisq.test(cols.df)
coa <- ade4::dudi.coa(cols.df, scannf = FALSE, nf = 2)

library(factoextra) 
fviz_ca_biplot(coa, repel = TRUE, col.col = "brown", col.row = "purple",
               labelsize = 5, pointsize = 5) + ggtitle("") +
  theme(legend.text = element_text(size = 25),
        axis.title.x.bottom = element_text(size = 15),
        axis.title.y.left = element_text(size = 15),
        axis.text = element_text(size = 15)) +
  ylim(c(-0.5,0.5))
```