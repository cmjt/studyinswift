# Surprise Song Outfits

## Data wrangling

:::{.callout-note}
All data paths are relative to the root of [the GitHub repository](https://github.com/cmjt/studyinswift)
:::

```{r, message=FALSE}
## packages 
require(tidyverse)
require(readxl)
require(ggimage)
require(extrafont)
```

```{r, message = FALSE}
## reading in data
surpriseSongsDressColours <-  readxl::read_excel("raw_data/surprise_songs.xlsx", sheet = "List")
surpriseSongsDressColours$Date <- as.Date(surpriseSongsDressColours$Date)
## map hex colour to outfit
dressColorMapping <- unique(surpriseSongsDressColours %>% select(DressName, ColourHex1))
colorPaletteDresses <- setNames(dressColorMapping$ColourHex1, dressColorMapping$DressName)
pathToDressColours <- "dress_images/images_high_res/cropped/"
```

```{r, message = FALSE}
## Need only consider first element of each concerts as the
## same outfit was worn for all surprise songs
## for anyone concert
oneRowPerConcert <- surpriseSongsDressColours %>%
    group_by(Date) %>%
    arrange(Date, Order) %>% 
    slice(1) %>%
    ungroup()
oneRowPerConcert
```

```{r, message = FALSE}
## map outfits to the corresponding images
oneRowPerConcert %>%
    count(DressName) %>%
    mutate(
        percentage = n / sum(n) * 100,
        imagePath = case_when(
            DressName == "Pink" ~paste0(pathToDressColours, "pink.jpg"),
            DressName == "Green" ~paste0(pathToDressColours, "green.jpg"),
            DressName == "Yellow" ~paste0(pathToDressColours, "yellow.jpg"),
            DressName == "Blue" ~paste0(pathToDressColours, "blue.jpg"),
            DressName == "Flamingo pink" ~ paste0(pathToDressColours,"flamingo_pink.jpg"),
            DressName == "Ocean blue" ~ paste0(pathToDressColours,"ocean_blue.jpg"),
            DressName == "Sunset orange" ~ paste0(pathToDressColours,"sunset_orange.jpg"),
            DressName == "Cotton candy" ~paste0(pathToDressColours, "cotton_candy.jpg"),
            DressName == "Blurple" ~paste0(pathToDressColours, "blurple.jpg"),
            DressName == "Grapefruit" ~ paste0(pathToDressColours,"grapefruit.jpg"),
            DressName == "Popsicle" ~ paste0(pathToDressColours,"popsicle.jpg"),
            TRUE ~ NA_character_
        )) -> outfits
outfits
```

## Visualizing surprise song outfits

### The most worn *looks* {.unnumbered}

```{r}
## barchart
ggplot(outfits, aes(x = reorder(DressName, -n), y = n, fill = DressName)) +
    geom_bar(stat = "identity", width = 0.8) +  
    geom_image(
        aes(image = imagePath, y = n),  
        size = 0.15,                    
        by = "height"                    
    ) +
    geom_text(
        aes(y = n + 3.8, label = paste0(n, "\n(", round(percentage, 1), "%)")),  
        vjust = 0,  
        color = "black",
        size = 4
    ) +
    scale_fill_manual(values = colorPaletteDresses) +
    theme_minimal() +
    labs(title = "", x = "", y = "") +
    theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
        axis.text.y = element_text(size = 14),
        plot.title = element_text(hjust = 0.5, size = 16),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.position = "none"
    ) + ylim(0, 35)
```

## Are the outfits random?

In this section we're going to look at the order of surprise song outfits. First let's just select the data we need.

```{r}
data <- data.frame(Outfit = oneRowPerConcert$DressName,
                   Leg = ifelse(oneRowPerConcert$Legs %in% c("First leg", "Latin America", "Asia-Oceania"),
                                "First",
                         ifelse(oneRowPerConcert$Legs == "European leg", "Europe", "Final")))

data |> head()
```

Now, let's look at the outfit transitions by creating a transition matrix using a simple function `transition_matrix`, which takes a sequence of categorical events and returns a table of the number of observed transitions between each event (in our case named outfits).

```{r}
transitions <- function(x) {
  n <- length(x)
  table(x[-n], x[-1])
}
```

Looking at the outfit transitions.

```{r, results='asis'}
data$Outfit |> transitions() |> knitr::kable(caption = "Outfit transitions of Swift's Eras tour")

```

This is quite a sparse table (*we know some outfits  didn't appear until later legs of the tour*). So, let's consider the transitions for each of the three main legs.

```{r, results='asis'}
## first leg
first_leg <- data[data$Leg == "First", "Outfit"]
first_leg |> transitions() |> knitr::kable(caption = "Outfit transitions for the first leg of Swift's Eras tour")
## europe leg
mid_leg <- data[data$Leg == "Europe", "Outfit"]
mid_leg |> transitions() |> knitr::kable(caption = "Outfit transitions for the European leg of Swift's Eras tour")
## final leg
final_leg <- data[data$Leg == "Final", "Outfit"]
final_leg |> transitions() |> knitr::kable(caption = "Outfit transitions for the final leg of Swift's Eras tour")

```


### A $\chi^2$-test for the transition counts

Likely, the first standard hypothesis test you think of for count/contingency data is the $\chi^2$-test (or the chi-squared test). Essentially, this works by *testing* for equal transition rates (if the outfit choices were completely random we'd expect equal numbers of transitions between the outfits); Slightly more formally,

$H_0 = \text{row outfits independent of column outfits}$ vs. $H_1 = \text{row outfits not independent of column outfits}$.

```{r, warning = FALSE}
## first leg
first_leg |> transitions() |> chisq.test()
## europe leg
mid_leg |> transitions() |> chisq.test()
## final leg
final_leg |> transitions() |> chisq.test()
```


```{r, echo = FALSE, warning = FALSE, results='asis'}
#| label: tab-chisq
chis <- list(3)
first_leg |> transitions() |> chisq.test() -> chis[[1]]
mid_leg |> transitions() |> chisq.test() -> chis[[2]]
final_leg |> transitions() |> chisq.test() -> chis[[3]]
res <- data.frame(statistic = sapply(chis, function(x) x$statistic),
                  df = sapply(chis, function(x) x$parameter),
                  p.value = sapply(chis, function(x) x$p.value))
rownames(res) <- c("First Leg", "European Leg", "Final Leg")
colnames(res) <- c("Chi-squared statistic", "Degrees of freedom", "p-vlaue")
knitr::kable(res, digits = 3, caption = "Summary of the chi-squated tests on the transition matricies for each leg of the Eras tour.")
```

Therefore, if our $\chi^2$ assumptions were met we might infer that there's some evidence against the outfits for the European leg being random.

```{r, echo = FALSE, fig.cap="Chi-squared distribution under the NULL hypothesis for each leg along with the observed chi-squared statistic in purple."}

x <- seq(0,40, length.out = 100)
chisq_data <- data.frame(x = rep(x, time = 3),
                         leg = rep(c("First Leg", "European Leg", "Final Leg"), each = 100),
                         stat = rep(res[,1], each = 100))
chisq_data$density <- c(dchisq(x, df = res[1,2]), dchisq(x, df = res[2,2]), dchisq(x, df = res[3,2]))
chisq_data |>
  mutate(across(leg, ~factor(., levels = c("First Leg", "European Leg", "Final Leg")))) |>
  ggplot(aes(x = x, y = density)) +
  geom_line(linewidth = 2) +
  geom_vline(aes(xintercept = stat), linetype = "dashed", color = "purple") +
  facet_wrap(~ leg, nrow = 1) +
  labs(title = "",x = "", y = "") + theme_bw()

```


### A randomisation test 

If we're not happy that our parametric assumptions are met then we can (*often*) fall back on simple resampling methods; basically simulating what would happen under chance alone and then comparing how our observed situation stack up!

To begin with let's use the $\chi^2$-squared statistic to *represent* the transition matrix we observed for each leg (it is a valid metric comparing between what we expected under independence and what we observed). By using a randomisation test we can build up a sampling distribution of this chosen metric that represent what would happen under chance alone (i.e., without any assumptions about the shape of this distribution). Our observed statistics in this case are given in the first column of @tab-chisq.

```{r}
## create a function for the randomisation test using chi-sq
## on the transition matrix, using a for loop just bc

randomisation <- function(data, nreps = 1000, seed = 1984){
  sampling_dist <- numeric(nreps)
  set.seed(seed) 
  for (i in 1:nreps) {
   sampling_dist[i] <- suppressWarnings(sample(data) |> 
                                          transitions() |> 
                                          chisq.test())$statistic
  }
return(sampling_dist)
}
```

Calculating a p-value (*note they're all pretty much the same as above!*).

```{r, warning = FALSE}
## first leg
null_first <- randomisation(first_leg)
mean(null_first >= (first_leg |> transitions() |> chisq.test())$statistic)
## European leg
null_mid <- randomisation(mid_leg)
mean(null_mid >= (mid_leg |> transitions() |> chisq.test())$statistic)
## Final leg
null_final <- randomisation(final_leg)
mean(null_final >= (final_leg |> transitions() |> chisq.test())$statistic)
```


```{r, echo = FALSE, fig.cap="Sampling distribution of the test statistic (the chi-squared statistic) under the NULL hypothesis for each leg along with the observed test statistic in purple.", warning=FALSE, message=FALSE}

rand_data <- data.frame(x = c(null_first, null_mid, null_final),
                         leg = rep(c("First Leg", "European Leg", "Final Leg"), each = 1000),
                         stat = rep(res[,1], each = 1000))
rand_data |>
  mutate(across(leg, ~factor(., levels = c("First Leg", "European Leg", "Final Leg")))) |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  geom_vline(aes(xintercept = stat), linetype = "dashed", color = "purple") +
  facet_wrap(~ leg, nrow = 1) +
  labs(title = "",x = "", y = "") + theme_bw()

```

But, we can actually use any metric we like in a randomisation test! For our example, the $\chi^2$ is a nice (*distance*) statistic because it considers all the transitions, but if we were particularly interested in consecutive repeated outfits (i.e., the diagonals of the transition matrix) we could look at those instead. 

$H_0 = \text{outfit sequence is random}$ vs. $H_1 = \text{number of consecutive repeated outfits (i.e., of the same type) is higher or lower than would likely occur by chance}$.


```{r}
## create a new function for the randomisation test using the 
## diagonals of the transition matrix (i.e., consecutively repeated outfits)

randomisation <- function(data, nreps = 1000, seed = 1984){
  sampling_dist <- numeric(nreps)
  set.seed(seed) 
  for (i in 1:nreps) {
   sampling_dist[i] <- sample(data) |> transitions() |> diag() |> sum()
  }
return(sampling_dist)
}

```

Calculating a *two-sided* p-value.

```{r, warning = FALSE}
## first leg
null_first <- randomisation(first_leg)
obs_first <- first_leg |> transitions() |> diag() |> sum()
mean(abs(null_first - mean(null_first)) >= abs(obs_first - mean(null_first)))
## European leg
null_mid <- randomisation(mid_leg)
obs_mid <- mean(null_mid >= mid_leg |> transitions() |> diag() |> sum())
mean(abs(null_mid - mean(null_mid)) >= abs(obs_mid - mean(null_mid)))
## Final leg
null_final <- randomisation(final_leg)
obs_final <- mean(null_final >= final_leg |> transitions() |> diag() |> sum())
mean(abs(null_final - mean(null_final)) >= abs(obs_final - mean(null_final)))
```


```{r, echo = FALSE, fig.cap="Sampling distribution of the test statistic (the number of consecutive outfits repeated) under the NULL hypothesis for each leg along with the observed test statistic in purple.", warning=FALSE, message=FALSE}
con <- c(first_leg |> transitions() |> diag() |> sum(),
         mid_leg |> transitions() |> diag() |> sum(),
         final_leg |> transitions() |> diag() |> sum())

rand_data <- data.frame(x = c(null_first, null_mid, null_final),
                         leg = rep(c("First Leg", "European Leg", "Final Leg"), each = 1000),
                         stat = rep(con, each = 1000))
rand_data |>
  mutate(across(leg, ~factor(., levels = c("First Leg", "European Leg", "Final Leg")))) |>
  ggplot(aes(x = x)) +
  geom_histogram() +
  geom_vline(aes(xintercept = stat), linetype = "dashed", color = "purple") +
  facet_wrap(~ leg, nrow = 1, scales = "free_x") +
  labs(title = "",x = "", y = "") + theme_bw()

```


### A likelihood ratio test!