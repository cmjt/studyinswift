# Data wrangling

:::{.callout-note}
All data paths are relative to the root of [the GitHub repository](https://github.com/cmjt/studyinswift)
:::

```{r, message = FALSE}
## packages 
require(tidyverse)
require(readxl)
```

```{r, message = FALSE}
## reading in data
surpriseSongsDressColours <-  readxl::read_excel("raw_data/surprise_songs.xlsx", sheet = "List")
surpriseSongsDressColours$Date <- as.Date(surpriseSongsDressColours$Date)
## map hex colour to outfit
dressColorMapping <- unique(surpriseSongsDressColours %>% select(DressName, ColourHex1))
colorPaletteDresses <- setNames(dressColorMapping$ColourHex1, dressColorMapping$DressName)
pathToDressColours <- "dress_images/images_high_res/cropped/"
```

```{r, message = FALSE}
## Need only consider first element of each concerts as the
## same outfit was worn for all surprise songs
## for anyone concert
oneRowPerConcert <- surpriseSongsDressColours %>%
    group_by(Date) %>%
    arrange(Date, Order) %>% 
    slice(1) %>%
    ungroup()
oneRowPerConcert
```

```{r, message = FALSE}
## map outfits to the corresponding images
oneRowPerConcert %>%
    count(DressName) %>%
    mutate(
        percentage = n / sum(n) * 100,
        imagePath = case_when(
            DressName == "Pink" ~paste0(pathToDressColours, "pink.jpg"),
            DressName == "Green" ~paste0(pathToDressColours, "green.jpg"),
            DressName == "Yellow" ~paste0(pathToDressColours, "yellow.jpg"),
            DressName == "Blue" ~paste0(pathToDressColours, "blue.jpg"),
            DressName == "Flamingo pink" ~ paste0(pathToDressColours,"flamingo_pink.jpg"),
            DressName == "Ocean blue" ~ paste0(pathToDressColours,"ocean_blue.jpg"),
            DressName == "Sunset orange" ~ paste0(pathToDressColours,"sunset_orange.jpg"),
            DressName == "Cotton candy" ~paste0(pathToDressColours, "cotton_candy.jpg"),
            DressName == "Blurple" ~paste0(pathToDressColours, "blurple.jpg"),
            DressName == "Grapefruit" ~ paste0(pathToDressColours,"grapefruit.jpg"),
            DressName == "Popsicle" ~ paste0(pathToDressColours,"popsicle.jpg"),
            TRUE ~ NA_character_
        )) -> outfits
outfits
```



```{r}
#| warning: FALSE
allSongsMetadata <- "raw_data/album_info_metadata_neutral.xlsx"
allSongsMetadata <- readxl::read_excel(allSongsMetadata, sheet = "metadata")
source("code/colour_palletts.r")
rawColorData <- data.frame(
    colour = trimws(unlist(strsplit(allSongsMetadata$colour_MK, ";"))),
    meaning = trimws(unlist(strsplit(allSongsMetadata$colour_meaningMK, ";")))
) %>% filter(!is.na(colour) & !is.na(meaning))

colorSentimentScores <- rawColorData %>%
    mutate(
        meaning = trimws(meaning),  
        score = case_when(
            tolower(meaning) == "positive" ~ 1,
            tolower(meaning) == "neutral" ~ 0.5,
            tolower(meaning) == "negative" ~ 0,
            TRUE ~ NA_real_
        )
    )

## Calculate average sentiment for each individual color
individualColorSentiments <- colorSentimentScores %>%
    group_by(colour) %>%
    summarise(
        avgSentiment = mean(score, na.rm = TRUE),
        mentionCount = n()
    ) %>%
    ungroup()

individualColorSentiments$colourGroup <- colorGroups[individualColorSentiments$colour]
individualColorSentiments$colourHexColour <-sapply(individualColorSentiments$colour, \(x) colorPaletteColours[[x]])
individualColorSentiments$colourGroupColour <-sapply(individualColorSentiments$colourGroup, \(x) colorPaletteGroups[[x]])

individualColorSentiments
```


```{r}
#| eval: FALSE
#| echo: FALSE
save.image(file = "onload.RData")
# convert .RData -> .rdb/.rdx
e <- local({load("onload.RData"); environment()})
tools:::makeLazyLoadDB(e, "onload")
```
